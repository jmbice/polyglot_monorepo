name: Test Services Locally

on:
  workflow_call:
    secrets:
      LIBRARY_TOKEN_GITHUB:
        required: true
      AWS_ACCOUNT:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true

    inputs:
      environment:
        type: string
        required: true
      paths_to_test:
        type: string
        required: true

jobs:
  # JOB to run change detection
  test:
    name: Test
    environment: ${{ inputs.environment }}
    env:
      CICD_DEPLOYMENT_ENVIRONMENT: ${{ vars.DEPLOYMENT_ENVIRONMENT == 'production' && 'production-cicd' || vars.DEPLOYMENT_ENVIRONMENT == 'develop' && 'develop-cicd' || '' }}
    if: ${{ inputs.paths_to_test != '[]' && inputs.paths_to_test != '' }}
    strategy:
      matrix:
        paths_to_test_value: ${{ fromJSON(inputs.paths_to_test) }}
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Branch
        uses: actions/checkout@v4

      - name: Set Node Version
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Create Environment File
        run: |
          touch .env
          echo ALLOW_LIST_IPS=${{ vars.ALLOW_LIST_IPS }} >> .env
          echo DEPLOYMENT_ENVIRONMENT=${{ env.CICD_DEPLOYMENT_ENVIRONMENT }} >> .env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          echo LIBRARY_TOKEN_GITHUB=${{ secrets.LIBRARY_TOKEN_GITHUB }} >> .env
          echo AWS_REGION=${{ secrets.AWS_REGION }} >> .env

      - name: Install Libraries (node & python)
        run: |
          npm i -w=${{ matrix.paths_to_test_value }}
          npm run python:install -w=${{ matrix.paths_to_test_value }}

      - name: Execute Local Tests By Path
        run: npm run test:local -w=${{ matrix.paths_to_test_value }}

      - name: Clean up virtual environmnet
        run: npm run python:clean -w=${{ matrix.paths_to_test_value }}

      - name: Clean up .env file
        if: always() # Ensures cleanup even if previous steps fail
        run: rm .env
