import os
import json


def get_read_only_constants():
    DEPLOYMENT_ENVIRONMENT = os.environ.get("DEPLOYMENT_ENVIRONMENT")
    AWS_REGION = os.environ.get("AWS_REGION")
    EVENT_SOURCE_TABLE_NAME = os.environ.get("EVENT_SOURCE_TABLE_NAME")
    PROCESS_TASKS_VPC_SUBNETS = parsSubnetIds()
    PROCESS_TASKS_VPC_SECURITY_GROUP_ID = os.environ.get("PROCESS_TASKS_VPC_SECURITY_GROUP_ID")
    PROCESS_TASKS_SECURITY_GROUP_ID = os.environ.get("PROCESS_TASKS_SECURITY_GROUP_ID")
    PROCESS_TASKS_CLUSTER_NAME = os.environ.get("PROCESS_TASKS_CLUSTER_NAME")
    PROCESS_TASKS_DEFINITION_ARN = os.environ.get("PROCESS_TASKS_TASK_DEFINITION_ARN")
    PROCESS_TASKS_CONTAINER_NAME = os.environ.get("PROCESS_TASKS_CONTAINER_NAME")

    constants = {
        "DEPLOYMENT_ENVIRONMENT": DEPLOYMENT_ENVIRONMENT,
        "AWS_REGION": AWS_REGION,
        "EVENT_SOURCE_TABLE_NAME": EVENT_SOURCE_TABLE_NAME,
        "PROCESS_TASKS_VPC_SUBNETS": PROCESS_TASKS_VPC_SUBNETS,
        "PROCESS_TASKS_SECURITY_GROUP_ID": PROCESS_TASKS_SECURITY_GROUP_ID,
        "PROCESS_TASKS_VPC_SECURITY_GROUP_ID": PROCESS_TASKS_VPC_SECURITY_GROUP_ID,
        "PROCESS_TASKS_CLUSTER_NAME": PROCESS_TASKS_CLUSTER_NAME,
        "PROCESS_TASKS_DEFINITION_ARN": PROCESS_TASKS_DEFINITION_ARN,
        "PROCESS_TASKS_CONTAINER_NAME": PROCESS_TASKS_CONTAINER_NAME,
    }

    return constants


def parsSubnetIds():
    PROCESS_TASKS_VPC_SUBNETS_RAW = os.environ.get("PROCESS_TASKS_VPC_SUBNETS", "[]")
    PROCESS_TASKS_VPC_SUBNETS = json.loads(PROCESS_TASKS_VPC_SUBNETS_RAW)
    if PROCESS_TASKS_VPC_SUBNETS:
        return PROCESS_TASKS_VPC_SUBNETS
    else:
        return []
